{
  "openapi": "3.0.0",
  "info": {
    "title": "Recipes management API",
    "version": "1.0.0",
    "description": "This API provides the necessary endpoints to manage the users and recipes within the app (recipe-book). It allows users to register, log in, create, update, delete and search for recipes. The API is designed to integrate with the app frontend."
  },
  "components": {
    "responses": {
      "500InternalError": {
        "description": "Something went wrong and the expected behavior for the request was not met.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong."
                },
                "data": {
                  "enum": [
                    null
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "default": "INTERNAL_ERROR"
                },
                "details": {
                  "enum": [
                    null
                  ]
                }
              }
            }
          }
        }
      },
      "401GenericUnauthorized": {
        "description": "The access token was not found, it is invalid, or the payload did not pass validations.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "message": {
                  "type": "string",
                  "example": "Invalid token."
                },
                "data": {
                  "enum": [
                    null
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "default": "UNAUTHORIZED"
                },
                "details": {
                  "enum": [
                    null
                  ]
                }
              }
            }
          }
        }
      },
      "400ImageUpload": {
        "description": "Either the received file is not an image or some of its properties, such as format, are invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/400GenericResBody"
            }
          }
        }
      },
      "404GenericNotFound": {
        "description": "Resource not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResBodyResourceNotFound"
            }
          }
        }
      },
      "404RequestingUserNotFound": {
        "description": "Requesting user not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResBodyResourceNotFound"
            }
          }
        }
      },
      "400InvalidJSON": {
        "description": "Received invalid JSON data.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "enum": [
                    false
                  ]
                },
                "message": {
                  "type": "string",
                  "default": "Invalid JSON."
                },
                "data": {
                  "enum": [
                    null
                  ]
                },
                "errorCode": {
                  "type": "string",
                  "default": "BAD_REQUEST"
                },
                "details": {
                  "enum": [
                    null
                  ]
                }
              }
            }
          }
        }
      },
      "422GenericDetailedInvalidParams": {
        "description": "Either the request body format is invalid or the parameters passed don't meet the minimum requirements.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "enum": [
                    false
                  ]
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "enum": [
                    null
                  ]
                },
                "errorCode": {
                  "type": "string"
                },
                "details": {
                  "type": "array",
                  "description": "An array containing information about the validations made."
                }
              }
            }
          }
        }
      },
      "422GenericInvalidParams": {
        "description": "The request body is incorrect. It may not contain the required information or may be in the wrong format.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "success": {
                  "enum": [
                    false
                  ]
                },
                "message": {
                  "type": "string"
                },
                "data": {
                  "enum": [
                    null
                  ]
                },
                "errorCode": {
                  "type": "string"
                },
                "details": {
                  "enum": [
                    null
                  ]
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "RecipeIngredients": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 40
            },
            "quantity": {
              "type": "integer",
              "minimum": 1,
              "maximum": 10000,
              "example": 1
            },
            "measurementUnit": {
              "type": "string",
              "enum": [
                "unit",
                "gram",
                "milliliter"
              ]
            }
          },
          "example": {
            "name": "sugar",
            "quantity": 460,
            "measurementUnit": "gram"
          }
        }
      },
      "PrivateUserData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "avatar_src": {
            "$ref": "#/components/schemas/UserAvatarSrc"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdRecipes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "savedRecipes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "ResBodyWithPrivateUserData": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PrivateUserData"
          },
          "errorCode": {
            "enum": [
              null
            ]
          },
          "details": {
            "enum": [
              null
            ]
          }
        }
      },
      "ResBodyResourceNotFound": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "enum": [
              null
            ]
          },
          "errorCode": {
            "type": "string",
            "default": "NOT_FOUND"
          },
          "details": {
            "enum": [
              null
            ]
          }
        }
      },
      "NullDataSuccessResBody": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              true
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "enum": [
              null
            ]
          },
          "errorCode": {
            "enum": [
              null
            ]
          },
          "details": {
            "enum": [
              null
            ]
          }
        }
      },
      "RecipeImageSrc": {
        "type": "string",
        "nullable": true,
        "example": "/images/recipes/1233154627811_256613.jpg"
      },
      "UserAvatarSrc": {
        "type": "string",
        "nullable": true,
        "example": "/images/avatars/1233154627811_256613.jpg"
      },
      "400GenericResBody": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "enum": [
              false
            ]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "enum": [
              null
            ]
          },
          "errorCode": {
            "type": "string",
            "default": "BAD_REQUEST"
          },
          "details": {
            "enum": [
              null
            ]
          }
        }
      }
    }
  },
  "paths": {
    "/api/users/register": {
      "post": {
        "summary": "Create a user",
        "responses": {
          "201": {
            "description": "Register successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataSuccessResBody"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400InvalidJSON"
          },
          "409": {
            "description": "Indicates that the received username already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "enum": [
                        null
                      ]
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "The user already exists."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/422GenericDetailedInvalidParams"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        },
        "requestBody": {
          "description": "The information to create the user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 14,
                    "pattern": "^[a-zA-Z0-9]+$",
                    "example": "lisa"
                  },
                  "password": {
                    "type": "string",
                    "description": "This property must contain at least one number, one lowercase letter and one uppercase letter.",
                    "minLength": 7,
                    "maxLength": 22,
                    "pattern": "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]+$",
                    "example": "Abcdefg1"
                  }
                },
                "required": [
                  "name",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "summary": "Log in the user",
        "responses": {
          "200": {
            "description": "Login successful",
            "headers": {
              "Set-Cookie": {
                "description": "The cookie containing the access token",
                "schema": {
                  "type": "string",
                  "example": "access_token=eyJhbGciOiJIUzI1NiIsInR5...; Max-Age=3600; Path=/; HttpOnly; SameSite=Strict; Secure"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NullDataSuccessResBody"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400InvalidJSON"
          },
          "401": {
            "description": "Indicates that the password is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        false
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "enum": [
                        null
                      ]
                    },
                    "errorCode": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "description": "An object containing information about the property/ies which caused the rejection.",
                      "properties": {
                        "password": {
                          "type": "string",
                          "example": "Invalid password."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404RequestingUserNotFound"
          },
          "422": {
            "$ref": "#/components/responses/422GenericDetailedInvalidParams"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        },
        "requestBody": {
          "description": "Login information",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 14,
                    "pattern": "^[a-zA-Z0-9]+$",
                    "example": "lisa"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 7,
                    "maxLength": 22,
                    "example": "Abcdefg1"
                  }
                },
                "required": [
                  "name",
                  "password"
                ]
              }
            }
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "summary": "Log out the user",
        "responses": {
          "200": {
            "description": "Log out the user by clearing up their cookie containing the access token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "enum": [
                        null
                      ]
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/avatar": {
      "post": {
        "summary": "Upload a profile picture.",
        "description": "Upload an image to use as the profile picture. Session required.",
        "responses": {
          "201": {
            "description": "The image was uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "avatar_src": {
                          "$ref": "#/components/schemas/UserAvatarSrc"
                        }
                      }
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ImageUpload"
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404RequestingUserNotFound"
          },
          "422": {
            "$ref": "#/components/responses/422GenericInvalidParams"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        },
        "requestBody": {
          "description": "The information to extract the image from.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar_image": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "avatar_image"
                ]
              }
            }
          }
        }
      }
    },
    "/api/users/auth": {
      "get": {
        "summary": "Check if the user is logged in and get user information.",
        "responses": {
          "200": {
            "description": "The user is authenticated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "lisa"
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "avatar_src": {
                          "$ref": "#/components/schemas/UserAvatarSrc"
                        }
                      }
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404RequestingUserNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        }
      }
    },
    "/api/recipes": {
      "post": {
        "summary": "Create a recipe",
        "description": "Create a recipe with an optional image. User authentication is required.",
        "responses": {
          "201": {
            "description": "Indicates that the recipe was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "image_src": {
                          "$ref": "#/components/schemas/RecipeImageSrc"
                        }
                      }
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400ImageUpload"
          },
          "401": {
            "$ref": "#/components/responses/401GenericUnauthorized"
          },
          "404": {
            "$ref": "#/components/responses/404RequestingUserNotFound"
          },
          "422": {
            "$ref": "#/components/responses/422GenericDetailedInvalidParams"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        },
        "requestBody": {
          "description": "The information to create the recipe.",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 80,
                    "example": "Cookies"
                  },
                  "description": {
                    "type": "string",
                    "maxLength": 600,
                    "example": "Cookies recipe description"
                  },
                  "image": {
                    "type": "string",
                    "nullable": true,
                    "format": "binary"
                  },
                  "ingredients": {
                    "$ref": "#/components/schemas/RecipeIngredients"
                  },
                  "steps": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 400,
                      "example": "step 1"
                    },
                    "maxItems": 30
                  },
                  "timeSpent": {
                    "type": "object",
                    "properties": {
                      "prepTime": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 14400,
                        "example": 1800
                      },
                      "cookTime": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 57600,
                        "example": 3600
                      }
                    }
                  },
                  "recipeYield": {
                    "description": "Number of servings.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1000,
                    "example": 20
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "public",
                      "private"
                    ]
                  }
                },
                "required": [
                  "title",
                  "description",
                  "ingredients",
                  "steps",
                  "timeSpent",
                  "recipeYield",
                  "visibility"
                ]
              }
            }
          }
        }
      }
    },
    "/api/recipes/previews": {
      "get": {
        "summary": "Get a list of recipe previews",
        "responses": {
          "200": {
            "description": "Sent a list of recipe previews whose title matches the desired title specified in the query title param, or a random recipe if not.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "enum": [
                        true
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string",
                          "example": "BBQ Chicken"
                        },
                        "description": {
                          "type": "string",
                          "maxLength": 200
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "creator": {
                          "type": "string",
                          "nullable": true
                        },
                        "image_src": {
                          "$ref": "#/components/schemas/RecipeImageSrc"
                        },
                        "totalTimeSpent": {
                          "type": "number",
                          "description": "Total time to make the recipe expressed in seconds."
                        }
                      }
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404GenericNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "example": "bbq chicken"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number"
            },
            "example": 2
          }
        ]
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "summary": "Get data from a single recipe",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Recipe id.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recipe was sent in full.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "image_src": {
                          "$ref": "#/components/schemas/RecipeImageSrc"
                        },
                        "ingredients": {
                          "$ref": "#/components/schemas/RecipeIngredients"
                        },
                        "steps": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "prep_time": {
                          "type": "string"
                        },
                        "cook_time": {
                          "type": "string"
                        },
                        "recipeYield": {
                          "type": "integer",
                          "description": "Number of servings.",
                          "example": 1
                        },
                        "visibility": {
                          "type": "string",
                          "enum": [
                            "public",
                            "private"
                          ]
                        },
                        "creator": {
                          "type": "string",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastEdit": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          },
          "206": {
            "description": "Only part of the recipe was sent.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "title": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true
                        },
                        "image_src": {
                          "$ref": "#/components/schemas/RecipeImageSrc"
                        },
                        "ingredients": {
                          "$ref": "#/components/schemas/RecipeIngredients"
                        },
                        "steps": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "prep_time": {
                          "type": "string"
                        },
                        "cook_time": {
                          "type": "string"
                        },
                        "recipeYield": {
                          "type": "integer",
                          "description": "Number of servings.",
                          "example": 1
                        },
                        "creator": {
                          "type": "string",
                          "nullable": true
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "lastEdit": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "errorCode": {
                      "enum": [
                        null
                      ]
                    },
                    "details": {
                      "enum": [
                        null
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404GenericNotFound"
          },
          "500": {
            "$ref": "#/components/responses/500InternalError"
          }
        }
      }
    }
  }
}